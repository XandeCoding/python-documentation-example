{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python Documentation Uma demo apresentando algumas formas de documenta\u00e7\u00f5es que podem ser interessantes para futuras implementa\u00e7\u00f5es de projetos. Commands mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Follows app directory organization","title":"Python Documentation"},{"location":"#python-documentation","text":"Uma demo apresentando algumas formas de documenta\u00e7\u00f5es que podem ser interessantes para futuras implementa\u00e7\u00f5es de projetos.","title":"Python Documentation"},{"location":"#commands","text":"mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Follows app directory organization","title":"Project layout"},{"location":"repositories/clientRepository/","text":"ClientRepository ClientRepository Classe respons\u00e1vel por gerenciar a\u00e7\u00f5es realizadas no banco de dados Source code in repositories/ClientRepository.py class ClientRepository (): \"\"\"Classe respons\u00e1vel por gerenciar a\u00e7\u00f5es realizadas no banco de dados\"\"\" def create ( clientData : ClientSchema ): \"\"\"Cria um cliente no banco de dados \"\"\" return ClientModel . create ( name = clientData . name , age = clientData . age , email = clientData . email ) def get ( id : int ) -> ClientSchema : \"\"\"Obt\u00e9m um cliente do banco com base no id recebido\"\"\" return ClientModel \\ . filter ( ClientModel . id == id ) \\ . first () def get_all () -> List [ ClientSchema ]: \"\"\"Obt\u00e9m todos os clientes no banco de dados\"\"\" return list ( ClientModel . select ()) def update ( id : str , clientData : ClientSchema ) -> int : \"\"\"Atualiza os dados de um usu\u00e1rio no banco de dados\"\"\" return ClientModel \\ . update ( clientData . dict ()) \\ . where ( ClientModel . id == id ) \\ . execute () def delete ( id : str ) -> id : \"\"\"Deleta os dados de um cliente no banco de dados\"\"\" return ClientModel \\ . delete () \\ . where ( ClientModel . id == id ) \\ . limit ( 1 ) \\ . execute () def get_by_email ( email : str ) -> ClientSchema : \"\"\"Obt\u00e9m um cliente com base no email \u00fanico recebido\"\"\" return ClientModel \\ . filter ( ClientModel . email == email ) \\ . first () create ( clientData ) Cria um cliente no banco de dados Source code in repositories/ClientRepository.py def create ( clientData : ClientSchema ): \"\"\"Cria um cliente no banco de dados \"\"\" return ClientModel . create ( name = clientData . name , age = clientData . age , email = clientData . email ) delete ( id ) Deleta os dados de um cliente no banco de dados Source code in repositories/ClientRepository.py def delete ( id : str ) -> id : \"\"\"Deleta os dados de um cliente no banco de dados\"\"\" return ClientModel \\ . delete () \\ . where ( ClientModel . id == id ) \\ . limit ( 1 ) \\ . execute () get ( id ) Obt\u00e9m um cliente do banco com base no id recebido Source code in repositories/ClientRepository.py def get ( id : int ) -> ClientSchema : \"\"\"Obt\u00e9m um cliente do banco com base no id recebido\"\"\" return ClientModel \\ . filter ( ClientModel . id == id ) \\ . first () get_all () Obt\u00e9m todos os clientes no banco de dados Source code in repositories/ClientRepository.py def get_all () -> List [ ClientSchema ]: \"\"\"Obt\u00e9m todos os clientes no banco de dados\"\"\" return list ( ClientModel . select ()) get_by_email ( email ) Obt\u00e9m um cliente com base no email \u00fanico recebido Source code in repositories/ClientRepository.py def get_by_email ( email : str ) -> ClientSchema : \"\"\"Obt\u00e9m um cliente com base no email \u00fanico recebido\"\"\" return ClientModel \\ . filter ( ClientModel . email == email ) \\ . first () update ( id , clientData ) Atualiza os dados de um usu\u00e1rio no banco de dados Source code in repositories/ClientRepository.py def update ( id : str , clientData : ClientSchema ) -> int : \"\"\"Atualiza os dados de um usu\u00e1rio no banco de dados\"\"\" return ClientModel \\ . update ( clientData . dict ()) \\ . where ( ClientModel . id == id ) \\ . execute ()","title":"ClientRepository"},{"location":"repositories/clientRepository/#clientrepository","text":"","title":"ClientRepository"},{"location":"repositories/clientRepository/#src.repositories.ClientRepository.ClientRepository","text":"Classe respons\u00e1vel por gerenciar a\u00e7\u00f5es realizadas no banco de dados Source code in repositories/ClientRepository.py class ClientRepository (): \"\"\"Classe respons\u00e1vel por gerenciar a\u00e7\u00f5es realizadas no banco de dados\"\"\" def create ( clientData : ClientSchema ): \"\"\"Cria um cliente no banco de dados \"\"\" return ClientModel . create ( name = clientData . name , age = clientData . age , email = clientData . email ) def get ( id : int ) -> ClientSchema : \"\"\"Obt\u00e9m um cliente do banco com base no id recebido\"\"\" return ClientModel \\ . filter ( ClientModel . id == id ) \\ . first () def get_all () -> List [ ClientSchema ]: \"\"\"Obt\u00e9m todos os clientes no banco de dados\"\"\" return list ( ClientModel . select ()) def update ( id : str , clientData : ClientSchema ) -> int : \"\"\"Atualiza os dados de um usu\u00e1rio no banco de dados\"\"\" return ClientModel \\ . update ( clientData . dict ()) \\ . where ( ClientModel . id == id ) \\ . execute () def delete ( id : str ) -> id : \"\"\"Deleta os dados de um cliente no banco de dados\"\"\" return ClientModel \\ . delete () \\ . where ( ClientModel . id == id ) \\ . limit ( 1 ) \\ . execute () def get_by_email ( email : str ) -> ClientSchema : \"\"\"Obt\u00e9m um cliente com base no email \u00fanico recebido\"\"\" return ClientModel \\ . filter ( ClientModel . email == email ) \\ . first ()","title":"ClientRepository"},{"location":"repositories/clientRepository/#src.repositories.ClientRepository.ClientRepository.create","text":"Cria um cliente no banco de dados Source code in repositories/ClientRepository.py def create ( clientData : ClientSchema ): \"\"\"Cria um cliente no banco de dados \"\"\" return ClientModel . create ( name = clientData . name , age = clientData . age , email = clientData . email )","title":"create()"},{"location":"repositories/clientRepository/#src.repositories.ClientRepository.ClientRepository.delete","text":"Deleta os dados de um cliente no banco de dados Source code in repositories/ClientRepository.py def delete ( id : str ) -> id : \"\"\"Deleta os dados de um cliente no banco de dados\"\"\" return ClientModel \\ . delete () \\ . where ( ClientModel . id == id ) \\ . limit ( 1 ) \\ . execute ()","title":"delete()"},{"location":"repositories/clientRepository/#src.repositories.ClientRepository.ClientRepository.get","text":"Obt\u00e9m um cliente do banco com base no id recebido Source code in repositories/ClientRepository.py def get ( id : int ) -> ClientSchema : \"\"\"Obt\u00e9m um cliente do banco com base no id recebido\"\"\" return ClientModel \\ . filter ( ClientModel . id == id ) \\ . first ()","title":"get()"},{"location":"repositories/clientRepository/#src.repositories.ClientRepository.ClientRepository.get_all","text":"Obt\u00e9m todos os clientes no banco de dados Source code in repositories/ClientRepository.py def get_all () -> List [ ClientSchema ]: \"\"\"Obt\u00e9m todos os clientes no banco de dados\"\"\" return list ( ClientModel . select ())","title":"get_all()"},{"location":"repositories/clientRepository/#src.repositories.ClientRepository.ClientRepository.get_by_email","text":"Obt\u00e9m um cliente com base no email \u00fanico recebido Source code in repositories/ClientRepository.py def get_by_email ( email : str ) -> ClientSchema : \"\"\"Obt\u00e9m um cliente com base no email \u00fanico recebido\"\"\" return ClientModel \\ . filter ( ClientModel . email == email ) \\ . first ()","title":"get_by_email()"},{"location":"repositories/clientRepository/#src.repositories.ClientRepository.ClientRepository.update","text":"Atualiza os dados de um usu\u00e1rio no banco de dados Source code in repositories/ClientRepository.py def update ( id : str , clientData : ClientSchema ) -> int : \"\"\"Atualiza os dados de um usu\u00e1rio no banco de dados\"\"\" return ClientModel \\ . update ( clientData . dict ()) \\ . where ( ClientModel . id == id ) \\ . execute ()","title":"update()"}]}